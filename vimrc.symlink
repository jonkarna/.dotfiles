set nocompatible
let mapleader = " "

filetype off

" Declare bundles are handled via Vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Let Vundle manage Vundle
Bundle 'gmarik/vundle'

" github repos
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-bundler'
Bundle 'vim-scripts/trailing-whitespace'
Bundle 'tsaleh/vim-tmux'

" colorshemes
Bundle 'tpope/vim-vividchalk'
Bundle 'twerth/ir_black'
Bundle 'nanotech/jellybeans.vim'

filetype plugin indent on

set clipboard=unnamed
set nobackup
set nowritebackup
set noswapfile
set encoding=utf-8
set nowrap
set list listchars=tab:»·,trail:·

" Status Line
set number
set ruler
set showcmd
set laststatus=2

" Tab
set tabstop=2
set shiftwidth=2
set expandtab

" Search
set incsearch
set hlsearch
set ignorecase
set smartcase

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" makes K split lines (the opposite of J)
command FixWhitespaceCurrentLine execute 's/ [ ]*$//'
nmap K i<cr><esc>k:FixWhitespaceCurrentLine<enter>j

syntax on
colorscheme ir_black

let g:html_indent_tags = 'li\|p'

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-n>"
  endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>

" Code pasting from osx system clipboard
map <leader>v "+p

" Include local vim config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
